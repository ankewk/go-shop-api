version: '3.8'

services:
  # MySQL 数据库 - 开发环境
  mysql-dev:
    image: mysql:8.0
    container_name: gin-mysql-dev
    restart: unless-stopped
    ports:
      - "3307:3306"
    expose:
      - "3306"
    environment:
      MYSQL_ROOT_PASSWORD: dev_root_123
      MYSQL_DATABASE: gin_dev
      MYSQL_USER: gin_dev_user
      MYSQL_PASSWORD: gin_dev_pass
    volumes:
      - mysql_data_dev:/var/lib/mysql
      - ../scripts/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ../scripts/seed_data.sql:/docker-entrypoint-initdb.d/02-seed.sql
      - ./mysql/dev.cnf:/etc/mysql/conf.d/custom.cnf
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - microservices-dev-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "gin_dev_user", "-pgin_dev_pass"]
      timeout: 10s
      retries: 5
      start_period: 30s
      interval: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis缓存 - 开发环境
  redis-dev:
    image: redis:7-alpine
    container_name: gin-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    expose:
      - "6379"
    command: redis-server --requirepass dev_redis_123
    volumes:
      - redis_data_dev:/data
    networks:
      - microservices-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 3
      start_period: 10s
      interval: 30s
    deploy:
      resources:
        limits:
          memory: 128M

  # API网关 - 开发环境
  api-gateway-dev:
    build:
      context: ..
      dockerfile: services/api-gateway/Dockerfile.simple
    container_name: gin-api-gateway-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    env_file:
      - ../config/dev.env
    environment:
      PORT: 8080
      GIN_MODE: debug
      USER_SERVICE_HOST: host.docker.internal
      USER_SERVICE_PORT: 8085
      PRODUCT_SERVICE_HOST: host.docker.internal
      PRODUCT_SERVICE_PORT: 8082
      CART_SERVICE_HOST: host.docker.internal
      CART_SERVICE_PORT: 8083
      ORDER_SERVICE_HOST: host.docker.internal
      ORDER_SERVICE_PORT: 8084
    depends_on:
      mysql-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - microservices-dev-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ../logs/dev:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      timeout: 10s
      retries: 3
      start_period: 30s
      interval: 30s
    deploy:
      resources:
        limits:
          memory: 256M

  # Nginx反向代理 - 开发环境
  nginx-dev:
    image: nginx:alpine
    container_name: gin-nginx-dev
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf
      - ../frontend:/usr/share/nginx/html
      - ../logs/nginx/dev:/var/log/nginx
    depends_on:
      - api-gateway-dev
    networks:
      - microservices-dev-network
    deploy:
      resources:
        limits:
          memory: 64M

  # 监控服务 - Prometheus (开发环境)
  prometheus-dev:
    image: prom/prometheus:latest
    container_name: gin-prometheus-dev
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/dev.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_dev:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - microservices-dev-network
    deploy:
      resources:
        limits:
          memory: 512M

  # 日志管理 - Grafana (开发环境)
  grafana-dev:
    image: grafana/grafana:latest
    container_name: gin-grafana-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=dev_admin_123
    volumes:
      - grafana_data_dev:/var/lib/grafana
    depends_on:
      - prometheus-dev
    networks:
      - microservices-dev-network
    deploy:
      resources:
        limits:
          memory: 256M

networks:
  microservices-dev-network:
    driver: bridge
    name: go-shop-dev-network
    ipam:
      driver: default
      config:
        - subnet: 172.18.0.0/16

volumes:
  mysql_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  prometheus_data_dev:
    driver: local
  grafana_data_dev:
    driver: local 