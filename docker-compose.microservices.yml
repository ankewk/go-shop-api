version: '3.8'

services:
  # MySQL 数据库服务
  mysql:
    image: mysql:8.0
    container_name: gin-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: gin
      MYSQL_USER: gin_user
      MYSQL_PASSWORD: gin_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./scripts/seed_data.sql:/docker-entrypoint-initdb.d/02-seed.sql:ro
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      start_period: 40s
      interval: 30s

  # 用户微服务
  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    container_name: gin-user-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      # 数据库配置
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: gin_user
      DB_PASSWORD: gin_password
      DB_NAME: gin
      # 服务配置
      PORT: 8081
      GIN_MODE: release
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      timeout: 10s
      retries: 3
      start_period: 30s
      interval: 30s

  # 产品微服务
  product-service:
    build:
      context: .
      dockerfile: services/product-service/Dockerfile
    container_name: gin-product-service
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      # 数据库配置
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: gin_user
      DB_PASSWORD: gin_password
      DB_NAME: gin
      # 服务配置
      PORT: 8082
      GIN_MODE: release
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/health"]
      timeout: 10s
      retries: 3
      start_period: 30s
      interval: 30s

  # 购物车微服务
  cart-service:
    build:
      context: .
      dockerfile: services/cart-service/Dockerfile
    container_name: gin-cart-service
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      # 数据库配置
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: gin_user
      DB_PASSWORD: gin_password
      DB_NAME: gin
      # 服务配置
      PORT: 8083
      GIN_MODE: release
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/health"]
      timeout: 10s
      retries: 3
      start_period: 30s
      interval: 30s

  # 订单微服务
  order-service:
    build:
      context: .
      dockerfile: services/order-service/Dockerfile
    container_name: gin-order-service
    restart: unless-stopped
    ports:
      - "8084:8084"
    environment:
      # 数据库配置
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: gin_user
      DB_PASSWORD: gin_password
      DB_NAME: gin
      # 服务配置
      PORT: 8084
      GIN_MODE: release
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/health"]
      timeout: 10s
      retries: 3
      start_period: 30s
      interval: 30s

  # API网关
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    container_name: gin-api-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # 网关配置
      PORT: 8080
      GIN_MODE: release
      # 微服务地址配置
      USER_SERVICE_HOST: user-service
      USER_SERVICE_PORT: 8081
      PRODUCT_SERVICE_HOST: product-service
      PRODUCT_SERVICE_PORT: 8082
      CART_SERVICE_HOST: cart-service
      CART_SERVICE_PORT: 8083
      ORDER_SERVICE_HOST: order-service
      ORDER_SERVICE_PORT: 8084
    depends_on:
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      cart-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      timeout: 10s
      retries: 3
      start_period: 30s
      interval: 30s

# 网络配置
networks:
  microservices-network:
    driver: bridge

# 数据卷配置
volumes:
  mysql_data:
    driver: local 